// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// TodoCompletion represents TL type `todoCompletion#4cc120b7`.
type TodoCompletion struct {
	// ID field of TodoCompletion.
	ID int
	// CompletedBy field of TodoCompletion.
	CompletedBy int64
	// Date field of TodoCompletion.
	Date int
}

// TodoCompletionTypeID is TL type id of TodoCompletion.
const TodoCompletionTypeID = 0x4cc120b7

// Ensuring interfaces in compile-time for TodoCompletion.
var (
	_ bin.Encoder     = &TodoCompletion{}
	_ bin.Decoder     = &TodoCompletion{}
	_ bin.BareEncoder = &TodoCompletion{}
	_ bin.BareDecoder = &TodoCompletion{}
)

func (t *TodoCompletion) Zero() bool {
	if t == nil {
		return true
	}
	if !(t.ID == 0) {
		return false
	}
	if !(t.CompletedBy == 0) {
		return false
	}
	if !(t.Date == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (t *TodoCompletion) String() string {
	if t == nil {
		return "TodoCompletion(nil)"
	}
	type Alias TodoCompletion
	return fmt.Sprintf("TodoCompletion%+v", Alias(*t))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*TodoCompletion) TypeID() uint32 {
	return TodoCompletionTypeID
}

// TypeName returns name of type in TL schema.
func (*TodoCompletion) TypeName() string {
	return "todoCompletion"
}

// TypeInfo returns info about TL type.
func (t *TodoCompletion) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "todoCompletion",
		ID:   TodoCompletionTypeID,
	}
	if t == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "CompletedBy",
			SchemaName: "completed_by",
		},
		{
			Name:       "Date",
			SchemaName: "date",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (t *TodoCompletion) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode todoCompletion#4cc120b7 as nil")
	}
	b.PutID(TodoCompletionTypeID)
	return t.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (t *TodoCompletion) EncodeBare(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode todoCompletion#4cc120b7 as nil")
	}
	b.PutInt(t.ID)
	b.PutLong(t.CompletedBy)
	b.PutInt(t.Date)
	return nil
}

// Decode implements bin.Decoder.
func (t *TodoCompletion) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode todoCompletion#4cc120b7 to nil")
	}
	if err := b.ConsumeID(TodoCompletionTypeID); err != nil {
		return fmt.Errorf("unable to decode todoCompletion#4cc120b7: %w", err)
	}
	return t.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (t *TodoCompletion) DecodeBare(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode todoCompletion#4cc120b7 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode todoCompletion#4cc120b7: field id: %w", err)
		}
		t.ID = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode todoCompletion#4cc120b7: field completed_by: %w", err)
		}
		t.CompletedBy = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode todoCompletion#4cc120b7: field date: %w", err)
		}
		t.Date = value
	}
	return nil
}

// GetID returns value of ID field.
func (t *TodoCompletion) GetID() (value int) {
	if t == nil {
		return
	}
	return t.ID
}

// GetCompletedBy returns value of CompletedBy field.
func (t *TodoCompletion) GetCompletedBy() (value int64) {
	if t == nil {
		return
	}
	return t.CompletedBy
}

// GetDate returns value of Date field.
func (t *TodoCompletion) GetDate() (value int) {
	if t == nil {
		return
	}
	return t.Date
}
