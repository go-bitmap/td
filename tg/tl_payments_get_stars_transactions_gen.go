// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PaymentsGetStarsTransactionsRequest represents TL type `payments.getStarsTransactions#97938d5a`.
//
// See https://core.telegram.org/method/payments.getStarsTransactions for reference.
type PaymentsGetStarsTransactionsRequest struct {
	// Flags field of PaymentsGetStarsTransactionsRequest.
	Flags bin.Fields
	// Inbound field of PaymentsGetStarsTransactionsRequest.
	Inbound bool
	// Outbound field of PaymentsGetStarsTransactionsRequest.
	Outbound bool
	// Ascending field of PaymentsGetStarsTransactionsRequest.
	Ascending bool
	// Peer field of PaymentsGetStarsTransactionsRequest.
	Peer InputPeerClass
	// Offset field of PaymentsGetStarsTransactionsRequest.
	Offset string
	// Limit field of PaymentsGetStarsTransactionsRequest.
	Limit int
}

// PaymentsGetStarsTransactionsRequestTypeID is TL type id of PaymentsGetStarsTransactionsRequest.
const PaymentsGetStarsTransactionsRequestTypeID = 0x97938d5a

// Ensuring interfaces in compile-time for PaymentsGetStarsTransactionsRequest.
var (
	_ bin.Encoder     = &PaymentsGetStarsTransactionsRequest{}
	_ bin.Decoder     = &PaymentsGetStarsTransactionsRequest{}
	_ bin.BareEncoder = &PaymentsGetStarsTransactionsRequest{}
	_ bin.BareDecoder = &PaymentsGetStarsTransactionsRequest{}
)

func (g *PaymentsGetStarsTransactionsRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.Flags.Zero()) {
		return false
	}
	if !(g.Inbound == false) {
		return false
	}
	if !(g.Outbound == false) {
		return false
	}
	if !(g.Ascending == false) {
		return false
	}
	if !(g.Peer == nil) {
		return false
	}
	if !(g.Offset == "") {
		return false
	}
	if !(g.Limit == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *PaymentsGetStarsTransactionsRequest) String() string {
	if g == nil {
		return "PaymentsGetStarsTransactionsRequest(nil)"
	}
	type Alias PaymentsGetStarsTransactionsRequest
	return fmt.Sprintf("PaymentsGetStarsTransactionsRequest%+v", Alias(*g))
}

// FillFrom fills PaymentsGetStarsTransactionsRequest from given interface.
func (g *PaymentsGetStarsTransactionsRequest) FillFrom(from interface {
	GetInbound() (value bool)
	GetOutbound() (value bool)
	GetAscending() (value bool)
	GetPeer() (value InputPeerClass)
	GetOffset() (value string)
	GetLimit() (value int)
}) {
	g.Inbound = from.GetInbound()
	g.Outbound = from.GetOutbound()
	g.Ascending = from.GetAscending()
	g.Peer = from.GetPeer()
	g.Offset = from.GetOffset()
	g.Limit = from.GetLimit()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PaymentsGetStarsTransactionsRequest) TypeID() uint32 {
	return PaymentsGetStarsTransactionsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*PaymentsGetStarsTransactionsRequest) TypeName() string {
	return "payments.getStarsTransactions"
}

// TypeInfo returns info about TL type.
func (g *PaymentsGetStarsTransactionsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "payments.getStarsTransactions",
		ID:   PaymentsGetStarsTransactionsRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Inbound",
			SchemaName: "inbound",
			Null:       !g.Flags.Has(0),
		},
		{
			Name:       "Outbound",
			SchemaName: "outbound",
			Null:       !g.Flags.Has(1),
		},
		{
			Name:       "Ascending",
			SchemaName: "ascending",
			Null:       !g.Flags.Has(2),
		},
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Limit",
			SchemaName: "limit",
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (g *PaymentsGetStarsTransactionsRequest) SetFlags() {
	if !(g.Inbound == false) {
		g.Flags.Set(0)
	}
	if !(g.Outbound == false) {
		g.Flags.Set(1)
	}
	if !(g.Ascending == false) {
		g.Flags.Set(2)
	}
}

// Encode implements bin.Encoder.
func (g *PaymentsGetStarsTransactionsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode payments.getStarsTransactions#97938d5a as nil")
	}
	b.PutID(PaymentsGetStarsTransactionsRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *PaymentsGetStarsTransactionsRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode payments.getStarsTransactions#97938d5a as nil")
	}
	g.SetFlags()
	if err := g.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode payments.getStarsTransactions#97938d5a: field flags: %w", err)
	}
	if g.Peer == nil {
		return fmt.Errorf("unable to encode payments.getStarsTransactions#97938d5a: field peer is nil")
	}
	if err := g.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode payments.getStarsTransactions#97938d5a: field peer: %w", err)
	}
	b.PutString(g.Offset)
	b.PutInt(g.Limit)
	return nil
}

// Decode implements bin.Decoder.
func (g *PaymentsGetStarsTransactionsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode payments.getStarsTransactions#97938d5a to nil")
	}
	if err := b.ConsumeID(PaymentsGetStarsTransactionsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode payments.getStarsTransactions#97938d5a: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *PaymentsGetStarsTransactionsRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode payments.getStarsTransactions#97938d5a to nil")
	}
	{
		if err := g.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode payments.getStarsTransactions#97938d5a: field flags: %w", err)
		}
	}
	g.Inbound = g.Flags.Has(0)
	g.Outbound = g.Flags.Has(1)
	g.Ascending = g.Flags.Has(2)
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode payments.getStarsTransactions#97938d5a: field peer: %w", err)
		}
		g.Peer = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode payments.getStarsTransactions#97938d5a: field offset: %w", err)
		}
		g.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode payments.getStarsTransactions#97938d5a: field limit: %w", err)
		}
		g.Limit = value
	}
	return nil
}

// SetInbound sets value of Inbound conditional field.
func (g *PaymentsGetStarsTransactionsRequest) SetInbound(value bool) {
	if value {
		g.Flags.Set(0)
		g.Inbound = true
	} else {
		g.Flags.Unset(0)
		g.Inbound = false
	}
}

// GetInbound returns value of Inbound conditional field.
func (g *PaymentsGetStarsTransactionsRequest) GetInbound() (value bool) {
	if g == nil {
		return
	}
	return g.Flags.Has(0)
}

// SetOutbound sets value of Outbound conditional field.
func (g *PaymentsGetStarsTransactionsRequest) SetOutbound(value bool) {
	if value {
		g.Flags.Set(1)
		g.Outbound = true
	} else {
		g.Flags.Unset(1)
		g.Outbound = false
	}
}

// GetOutbound returns value of Outbound conditional field.
func (g *PaymentsGetStarsTransactionsRequest) GetOutbound() (value bool) {
	if g == nil {
		return
	}
	return g.Flags.Has(1)
}

// SetAscending sets value of Ascending conditional field.
func (g *PaymentsGetStarsTransactionsRequest) SetAscending(value bool) {
	if value {
		g.Flags.Set(2)
		g.Ascending = true
	} else {
		g.Flags.Unset(2)
		g.Ascending = false
	}
}

// GetAscending returns value of Ascending conditional field.
func (g *PaymentsGetStarsTransactionsRequest) GetAscending() (value bool) {
	if g == nil {
		return
	}
	return g.Flags.Has(2)
}

// GetPeer returns value of Peer field.
func (g *PaymentsGetStarsTransactionsRequest) GetPeer() (value InputPeerClass) {
	if g == nil {
		return
	}
	return g.Peer
}

// GetOffset returns value of Offset field.
func (g *PaymentsGetStarsTransactionsRequest) GetOffset() (value string) {
	if g == nil {
		return
	}
	return g.Offset
}

// GetLimit returns value of Limit field.
func (g *PaymentsGetStarsTransactionsRequest) GetLimit() (value int) {
	if g == nil {
		return
	}
	return g.Limit
}

// PaymentsGetStarsTransactions invokes method payments.getStarsTransactions#97938d5a returning error if any.
//
// See https://core.telegram.org/method/payments.getStarsTransactions for reference.
func (c *Client) PaymentsGetStarsTransactions(ctx context.Context, request *PaymentsGetStarsTransactionsRequest) (*PaymentsStarsStatus, error) {
	var result PaymentsStarsStatus

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
