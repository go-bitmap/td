// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// GetWebAppURLRequest represents TL type `getWebAppUrl#64c42cbe`.
type GetWebAppURLRequest struct {
	// Identifier of the target bot
	BotUserID int64
	// The URL from a keyboardButtonTypeWebApp button, inlineQueryResultsButtonTypeWebApp
	// button, or an empty string when the bot is opened from the side menu
	URL string
	// Preferred Web App theme; pass null to use the default theme
	Theme ThemeParameters
	// Short name of the current application; 0-64 English letters, digits, and underscores
	ApplicationName string
}

// GetWebAppURLRequestTypeID is TL type id of GetWebAppURLRequest.
const GetWebAppURLRequestTypeID = 0x64c42cbe

// Ensuring interfaces in compile-time for GetWebAppURLRequest.
var (
	_ bin.Encoder     = &GetWebAppURLRequest{}
	_ bin.Decoder     = &GetWebAppURLRequest{}
	_ bin.BareEncoder = &GetWebAppURLRequest{}
	_ bin.BareDecoder = &GetWebAppURLRequest{}
)

func (g *GetWebAppURLRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.BotUserID == 0) {
		return false
	}
	if !(g.URL == "") {
		return false
	}
	if !(g.Theme.Zero()) {
		return false
	}
	if !(g.ApplicationName == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GetWebAppURLRequest) String() string {
	if g == nil {
		return "GetWebAppURLRequest(nil)"
	}
	type Alias GetWebAppURLRequest
	return fmt.Sprintf("GetWebAppURLRequest%+v", Alias(*g))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*GetWebAppURLRequest) TypeID() uint32 {
	return GetWebAppURLRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*GetWebAppURLRequest) TypeName() string {
	return "getWebAppUrl"
}

// TypeInfo returns info about TL type.
func (g *GetWebAppURLRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "getWebAppUrl",
		ID:   GetWebAppURLRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BotUserID",
			SchemaName: "bot_user_id",
		},
		{
			Name:       "URL",
			SchemaName: "url",
		},
		{
			Name:       "Theme",
			SchemaName: "theme",
		},
		{
			Name:       "ApplicationName",
			SchemaName: "application_name",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *GetWebAppURLRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getWebAppUrl#64c42cbe as nil")
	}
	b.PutID(GetWebAppURLRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *GetWebAppURLRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getWebAppUrl#64c42cbe as nil")
	}
	b.PutInt53(g.BotUserID)
	b.PutString(g.URL)
	if err := g.Theme.Encode(b); err != nil {
		return fmt.Errorf("unable to encode getWebAppUrl#64c42cbe: field theme: %w", err)
	}
	b.PutString(g.ApplicationName)
	return nil
}

// Decode implements bin.Decoder.
func (g *GetWebAppURLRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getWebAppUrl#64c42cbe to nil")
	}
	if err := b.ConsumeID(GetWebAppURLRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode getWebAppUrl#64c42cbe: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *GetWebAppURLRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getWebAppUrl#64c42cbe to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode getWebAppUrl#64c42cbe: field bot_user_id: %w", err)
		}
		g.BotUserID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode getWebAppUrl#64c42cbe: field url: %w", err)
		}
		g.URL = value
	}
	{
		if err := g.Theme.Decode(b); err != nil {
			return fmt.Errorf("unable to decode getWebAppUrl#64c42cbe: field theme: %w", err)
		}
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode getWebAppUrl#64c42cbe: field application_name: %w", err)
		}
		g.ApplicationName = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (g *GetWebAppURLRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if g == nil {
		return fmt.Errorf("can't encode getWebAppUrl#64c42cbe as nil")
	}
	b.ObjStart()
	b.PutID("getWebAppUrl")
	b.Comma()
	b.FieldStart("bot_user_id")
	b.PutInt53(g.BotUserID)
	b.Comma()
	b.FieldStart("url")
	b.PutString(g.URL)
	b.Comma()
	b.FieldStart("theme")
	if err := g.Theme.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode getWebAppUrl#64c42cbe: field theme: %w", err)
	}
	b.Comma()
	b.FieldStart("application_name")
	b.PutString(g.ApplicationName)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (g *GetWebAppURLRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if g == nil {
		return fmt.Errorf("can't decode getWebAppUrl#64c42cbe to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("getWebAppUrl"); err != nil {
				return fmt.Errorf("unable to decode getWebAppUrl#64c42cbe: %w", err)
			}
		case "bot_user_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode getWebAppUrl#64c42cbe: field bot_user_id: %w", err)
			}
			g.BotUserID = value
		case "url":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode getWebAppUrl#64c42cbe: field url: %w", err)
			}
			g.URL = value
		case "theme":
			if err := g.Theme.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode getWebAppUrl#64c42cbe: field theme: %w", err)
			}
		case "application_name":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode getWebAppUrl#64c42cbe: field application_name: %w", err)
			}
			g.ApplicationName = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetBotUserID returns value of BotUserID field.
func (g *GetWebAppURLRequest) GetBotUserID() (value int64) {
	if g == nil {
		return
	}
	return g.BotUserID
}

// GetURL returns value of URL field.
func (g *GetWebAppURLRequest) GetURL() (value string) {
	if g == nil {
		return
	}
	return g.URL
}

// GetTheme returns value of Theme field.
func (g *GetWebAppURLRequest) GetTheme() (value ThemeParameters) {
	if g == nil {
		return
	}
	return g.Theme
}

// GetApplicationName returns value of ApplicationName field.
func (g *GetWebAppURLRequest) GetApplicationName() (value string) {
	if g == nil {
		return
	}
	return g.ApplicationName
}

// GetWebAppURL invokes method getWebAppUrl#64c42cbe returning error if any.
func (c *Client) GetWebAppURL(ctx context.Context, request *GetWebAppURLRequest) (*HTTPURL, error) {
	var result HTTPURL

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
