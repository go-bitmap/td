// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StarTransactionPartnerTelegram represents TL type `starTransactionPartnerTelegram#7a899cc0`.
type StarTransactionPartnerTelegram struct {
}

// StarTransactionPartnerTelegramTypeID is TL type id of StarTransactionPartnerTelegram.
const StarTransactionPartnerTelegramTypeID = 0x7a899cc0

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerTelegram) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerTelegram.
var (
	_ bin.Encoder     = &StarTransactionPartnerTelegram{}
	_ bin.Decoder     = &StarTransactionPartnerTelegram{}
	_ bin.BareEncoder = &StarTransactionPartnerTelegram{}
	_ bin.BareDecoder = &StarTransactionPartnerTelegram{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerTelegram{}
)

func (s *StarTransactionPartnerTelegram) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerTelegram) String() string {
	if s == nil {
		return "StarTransactionPartnerTelegram(nil)"
	}
	type Alias StarTransactionPartnerTelegram
	return fmt.Sprintf("StarTransactionPartnerTelegram%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerTelegram) TypeID() uint32 {
	return StarTransactionPartnerTelegramTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerTelegram) TypeName() string {
	return "starTransactionPartnerTelegram"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerTelegram) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerTelegram",
		ID:   StarTransactionPartnerTelegramTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerTelegram) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerTelegram#7a899cc0 as nil")
	}
	b.PutID(StarTransactionPartnerTelegramTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerTelegram) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerTelegram#7a899cc0 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerTelegram) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerTelegram#7a899cc0 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerTelegramTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerTelegram#7a899cc0: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerTelegram) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerTelegram#7a899cc0 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerTelegram) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerTelegram#7a899cc0 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerTelegram")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerTelegram) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerTelegram#7a899cc0 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerTelegram"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerTelegram#7a899cc0: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// StarTransactionPartnerAppStore represents TL type `starTransactionPartnerAppStore#e34026dc`.
type StarTransactionPartnerAppStore struct {
}

// StarTransactionPartnerAppStoreTypeID is TL type id of StarTransactionPartnerAppStore.
const StarTransactionPartnerAppStoreTypeID = 0xe34026dc

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerAppStore) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerAppStore.
var (
	_ bin.Encoder     = &StarTransactionPartnerAppStore{}
	_ bin.Decoder     = &StarTransactionPartnerAppStore{}
	_ bin.BareEncoder = &StarTransactionPartnerAppStore{}
	_ bin.BareDecoder = &StarTransactionPartnerAppStore{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerAppStore{}
)

func (s *StarTransactionPartnerAppStore) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerAppStore) String() string {
	if s == nil {
		return "StarTransactionPartnerAppStore(nil)"
	}
	type Alias StarTransactionPartnerAppStore
	return fmt.Sprintf("StarTransactionPartnerAppStore%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerAppStore) TypeID() uint32 {
	return StarTransactionPartnerAppStoreTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerAppStore) TypeName() string {
	return "starTransactionPartnerAppStore"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerAppStore) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerAppStore",
		ID:   StarTransactionPartnerAppStoreTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerAppStore) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerAppStore#e34026dc as nil")
	}
	b.PutID(StarTransactionPartnerAppStoreTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerAppStore) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerAppStore#e34026dc as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerAppStore) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerAppStore#e34026dc to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerAppStoreTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerAppStore#e34026dc: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerAppStore) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerAppStore#e34026dc to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerAppStore) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerAppStore#e34026dc as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerAppStore")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerAppStore) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerAppStore#e34026dc to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerAppStore"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerAppStore#e34026dc: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// StarTransactionPartnerGooglePlay represents TL type `starTransactionPartnerGooglePlay#f229f2a0`.
type StarTransactionPartnerGooglePlay struct {
}

// StarTransactionPartnerGooglePlayTypeID is TL type id of StarTransactionPartnerGooglePlay.
const StarTransactionPartnerGooglePlayTypeID = 0xf229f2a0

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerGooglePlay) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerGooglePlay.
var (
	_ bin.Encoder     = &StarTransactionPartnerGooglePlay{}
	_ bin.Decoder     = &StarTransactionPartnerGooglePlay{}
	_ bin.BareEncoder = &StarTransactionPartnerGooglePlay{}
	_ bin.BareDecoder = &StarTransactionPartnerGooglePlay{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerGooglePlay{}
)

func (s *StarTransactionPartnerGooglePlay) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerGooglePlay) String() string {
	if s == nil {
		return "StarTransactionPartnerGooglePlay(nil)"
	}
	type Alias StarTransactionPartnerGooglePlay
	return fmt.Sprintf("StarTransactionPartnerGooglePlay%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerGooglePlay) TypeID() uint32 {
	return StarTransactionPartnerGooglePlayTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerGooglePlay) TypeName() string {
	return "starTransactionPartnerGooglePlay"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerGooglePlay) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerGooglePlay",
		ID:   StarTransactionPartnerGooglePlayTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerGooglePlay) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerGooglePlay#f229f2a0 as nil")
	}
	b.PutID(StarTransactionPartnerGooglePlayTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerGooglePlay) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerGooglePlay#f229f2a0 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerGooglePlay) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerGooglePlay#f229f2a0 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerGooglePlayTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerGooglePlay#f229f2a0: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerGooglePlay) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerGooglePlay#f229f2a0 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerGooglePlay) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerGooglePlay#f229f2a0 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerGooglePlay")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerGooglePlay) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerGooglePlay#f229f2a0 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerGooglePlay"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerGooglePlay#f229f2a0: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// StarTransactionPartnerFragment represents TL type `starTransactionPartnerFragment#da1849b5`.
type StarTransactionPartnerFragment struct {
	// State of the withdrawal; may be null for refunds from Fragment
	WithdrawalState RevenueWithdrawalStateClass
}

// StarTransactionPartnerFragmentTypeID is TL type id of StarTransactionPartnerFragment.
const StarTransactionPartnerFragmentTypeID = 0xda1849b5

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerFragment) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerFragment.
var (
	_ bin.Encoder     = &StarTransactionPartnerFragment{}
	_ bin.Decoder     = &StarTransactionPartnerFragment{}
	_ bin.BareEncoder = &StarTransactionPartnerFragment{}
	_ bin.BareDecoder = &StarTransactionPartnerFragment{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerFragment{}
)

func (s *StarTransactionPartnerFragment) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.WithdrawalState == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerFragment) String() string {
	if s == nil {
		return "StarTransactionPartnerFragment(nil)"
	}
	type Alias StarTransactionPartnerFragment
	return fmt.Sprintf("StarTransactionPartnerFragment%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerFragment) TypeID() uint32 {
	return StarTransactionPartnerFragmentTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerFragment) TypeName() string {
	return "starTransactionPartnerFragment"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerFragment) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerFragment",
		ID:   StarTransactionPartnerFragmentTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "WithdrawalState",
			SchemaName: "withdrawal_state",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerFragment) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerFragment#da1849b5 as nil")
	}
	b.PutID(StarTransactionPartnerFragmentTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerFragment) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerFragment#da1849b5 as nil")
	}
	if s.WithdrawalState == nil {
		return fmt.Errorf("unable to encode starTransactionPartnerFragment#da1849b5: field withdrawal_state is nil")
	}
	if err := s.WithdrawalState.Encode(b); err != nil {
		return fmt.Errorf("unable to encode starTransactionPartnerFragment#da1849b5: field withdrawal_state: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerFragment) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerFragment#da1849b5 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerFragmentTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerFragment#da1849b5: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerFragment) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerFragment#da1849b5 to nil")
	}
	{
		value, err := DecodeRevenueWithdrawalState(b)
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerFragment#da1849b5: field withdrawal_state: %w", err)
		}
		s.WithdrawalState = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerFragment) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerFragment#da1849b5 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerFragment")
	b.Comma()
	b.FieldStart("withdrawal_state")
	if s.WithdrawalState == nil {
		return fmt.Errorf("unable to encode starTransactionPartnerFragment#da1849b5: field withdrawal_state is nil")
	}
	if err := s.WithdrawalState.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode starTransactionPartnerFragment#da1849b5: field withdrawal_state: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerFragment) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerFragment#da1849b5 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerFragment"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerFragment#da1849b5: %w", err)
			}
		case "withdrawal_state":
			value, err := DecodeTDLibJSONRevenueWithdrawalState(b)
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerFragment#da1849b5: field withdrawal_state: %w", err)
			}
			s.WithdrawalState = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetWithdrawalState returns value of WithdrawalState field.
func (s *StarTransactionPartnerFragment) GetWithdrawalState() (value RevenueWithdrawalStateClass) {
	if s == nil {
		return
	}
	return s.WithdrawalState
}

// StarTransactionPartnerTelegramAds represents TL type `starTransactionPartnerTelegramAds#91f9c6b`.
type StarTransactionPartnerTelegramAds struct {
}

// StarTransactionPartnerTelegramAdsTypeID is TL type id of StarTransactionPartnerTelegramAds.
const StarTransactionPartnerTelegramAdsTypeID = 0x91f9c6b

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerTelegramAds) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerTelegramAds.
var (
	_ bin.Encoder     = &StarTransactionPartnerTelegramAds{}
	_ bin.Decoder     = &StarTransactionPartnerTelegramAds{}
	_ bin.BareEncoder = &StarTransactionPartnerTelegramAds{}
	_ bin.BareDecoder = &StarTransactionPartnerTelegramAds{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerTelegramAds{}
)

func (s *StarTransactionPartnerTelegramAds) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerTelegramAds) String() string {
	if s == nil {
		return "StarTransactionPartnerTelegramAds(nil)"
	}
	type Alias StarTransactionPartnerTelegramAds
	return fmt.Sprintf("StarTransactionPartnerTelegramAds%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerTelegramAds) TypeID() uint32 {
	return StarTransactionPartnerTelegramAdsTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerTelegramAds) TypeName() string {
	return "starTransactionPartnerTelegramAds"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerTelegramAds) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerTelegramAds",
		ID:   StarTransactionPartnerTelegramAdsTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerTelegramAds) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerTelegramAds#91f9c6b as nil")
	}
	b.PutID(StarTransactionPartnerTelegramAdsTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerTelegramAds) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerTelegramAds#91f9c6b as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerTelegramAds) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerTelegramAds#91f9c6b to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerTelegramAdsTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerTelegramAds#91f9c6b: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerTelegramAds) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerTelegramAds#91f9c6b to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerTelegramAds) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerTelegramAds#91f9c6b as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerTelegramAds")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerTelegramAds) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerTelegramAds#91f9c6b to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerTelegramAds"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerTelegramAds#91f9c6b: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// StarTransactionPartnerBot represents TL type `starTransactionPartnerBot#1bdcb459`.
type StarTransactionPartnerBot struct {
	// Identifier of the bot
	BotUserID int64
	// Information about the bought product; may be null if not applicable
	ProductInfo ProductInfo
	// Invoice payload; for bots only
	InvoicePayload []byte
}

// StarTransactionPartnerBotTypeID is TL type id of StarTransactionPartnerBot.
const StarTransactionPartnerBotTypeID = 0x1bdcb459

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerBot) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerBot.
var (
	_ bin.Encoder     = &StarTransactionPartnerBot{}
	_ bin.Decoder     = &StarTransactionPartnerBot{}
	_ bin.BareEncoder = &StarTransactionPartnerBot{}
	_ bin.BareDecoder = &StarTransactionPartnerBot{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerBot{}
)

func (s *StarTransactionPartnerBot) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.BotUserID == 0) {
		return false
	}
	if !(s.ProductInfo.Zero()) {
		return false
	}
	if !(s.InvoicePayload == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerBot) String() string {
	if s == nil {
		return "StarTransactionPartnerBot(nil)"
	}
	type Alias StarTransactionPartnerBot
	return fmt.Sprintf("StarTransactionPartnerBot%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerBot) TypeID() uint32 {
	return StarTransactionPartnerBotTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerBot) TypeName() string {
	return "starTransactionPartnerBot"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerBot) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerBot",
		ID:   StarTransactionPartnerBotTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BotUserID",
			SchemaName: "bot_user_id",
		},
		{
			Name:       "ProductInfo",
			SchemaName: "product_info",
		},
		{
			Name:       "InvoicePayload",
			SchemaName: "invoice_payload",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerBot) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerBot#1bdcb459 as nil")
	}
	b.PutID(StarTransactionPartnerBotTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerBot) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerBot#1bdcb459 as nil")
	}
	b.PutInt53(s.BotUserID)
	if err := s.ProductInfo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode starTransactionPartnerBot#1bdcb459: field product_info: %w", err)
	}
	b.PutBytes(s.InvoicePayload)
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerBot) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerBot#1bdcb459 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerBotTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerBot#1bdcb459: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerBot) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerBot#1bdcb459 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerBot#1bdcb459: field bot_user_id: %w", err)
		}
		s.BotUserID = value
	}
	{
		if err := s.ProductInfo.Decode(b); err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerBot#1bdcb459: field product_info: %w", err)
		}
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerBot#1bdcb459: field invoice_payload: %w", err)
		}
		s.InvoicePayload = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerBot) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerBot#1bdcb459 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerBot")
	b.Comma()
	b.FieldStart("bot_user_id")
	b.PutInt53(s.BotUserID)
	b.Comma()
	b.FieldStart("product_info")
	if err := s.ProductInfo.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode starTransactionPartnerBot#1bdcb459: field product_info: %w", err)
	}
	b.Comma()
	b.FieldStart("invoice_payload")
	b.PutBytes(s.InvoicePayload)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerBot) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerBot#1bdcb459 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerBot"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerBot#1bdcb459: %w", err)
			}
		case "bot_user_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerBot#1bdcb459: field bot_user_id: %w", err)
			}
			s.BotUserID = value
		case "product_info":
			if err := s.ProductInfo.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerBot#1bdcb459: field product_info: %w", err)
			}
		case "invoice_payload":
			value, err := b.Bytes()
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerBot#1bdcb459: field invoice_payload: %w", err)
			}
			s.InvoicePayload = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetBotUserID returns value of BotUserID field.
func (s *StarTransactionPartnerBot) GetBotUserID() (value int64) {
	if s == nil {
		return
	}
	return s.BotUserID
}

// GetProductInfo returns value of ProductInfo field.
func (s *StarTransactionPartnerBot) GetProductInfo() (value ProductInfo) {
	if s == nil {
		return
	}
	return s.ProductInfo
}

// GetInvoicePayload returns value of InvoicePayload field.
func (s *StarTransactionPartnerBot) GetInvoicePayload() (value []byte) {
	if s == nil {
		return
	}
	return s.InvoicePayload
}

// StarTransactionPartnerChannel represents TL type `starTransactionPartnerChannel#44b29c29`.
type StarTransactionPartnerChannel struct {
	// Identifier of the chat
	ChatID int64
	// Identifier of the corresponding message with paid media; can be an identifier of a
	// deleted message
	PaidMediaMessageID int64
	// Information about the bought media
	Media []PaidMediaClass
}

// StarTransactionPartnerChannelTypeID is TL type id of StarTransactionPartnerChannel.
const StarTransactionPartnerChannelTypeID = 0x44b29c29

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerChannel) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerChannel.
var (
	_ bin.Encoder     = &StarTransactionPartnerChannel{}
	_ bin.Decoder     = &StarTransactionPartnerChannel{}
	_ bin.BareEncoder = &StarTransactionPartnerChannel{}
	_ bin.BareDecoder = &StarTransactionPartnerChannel{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerChannel{}
)

func (s *StarTransactionPartnerChannel) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.ChatID == 0) {
		return false
	}
	if !(s.PaidMediaMessageID == 0) {
		return false
	}
	if !(s.Media == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerChannel) String() string {
	if s == nil {
		return "StarTransactionPartnerChannel(nil)"
	}
	type Alias StarTransactionPartnerChannel
	return fmt.Sprintf("StarTransactionPartnerChannel%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerChannel) TypeID() uint32 {
	return StarTransactionPartnerChannelTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerChannel) TypeName() string {
	return "starTransactionPartnerChannel"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerChannel) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerChannel",
		ID:   StarTransactionPartnerChannelTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "PaidMediaMessageID",
			SchemaName: "paid_media_message_id",
		},
		{
			Name:       "Media",
			SchemaName: "media",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerChannel) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerChannel#44b29c29 as nil")
	}
	b.PutID(StarTransactionPartnerChannelTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerChannel) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerChannel#44b29c29 as nil")
	}
	b.PutInt53(s.ChatID)
	b.PutInt53(s.PaidMediaMessageID)
	b.PutInt(len(s.Media))
	for idx, v := range s.Media {
		if v == nil {
			return fmt.Errorf("unable to encode starTransactionPartnerChannel#44b29c29: field media element with index %d is nil", idx)
		}
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare starTransactionPartnerChannel#44b29c29: field media element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerChannel) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerChannel#44b29c29 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerChannelTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerChannel#44b29c29: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerChannel) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerChannel#44b29c29 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerChannel#44b29c29: field chat_id: %w", err)
		}
		s.ChatID = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerChannel#44b29c29: field paid_media_message_id: %w", err)
		}
		s.PaidMediaMessageID = value
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerChannel#44b29c29: field media: %w", err)
		}

		if headerLen > 0 {
			s.Media = make([]PaidMediaClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodePaidMedia(b)
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerChannel#44b29c29: field media: %w", err)
			}
			s.Media = append(s.Media, value)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerChannel) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerChannel#44b29c29 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerChannel")
	b.Comma()
	b.FieldStart("chat_id")
	b.PutInt53(s.ChatID)
	b.Comma()
	b.FieldStart("paid_media_message_id")
	b.PutInt53(s.PaidMediaMessageID)
	b.Comma()
	b.FieldStart("media")
	b.ArrStart()
	for idx, v := range s.Media {
		if v == nil {
			return fmt.Errorf("unable to encode starTransactionPartnerChannel#44b29c29: field media element with index %d is nil", idx)
		}
		if err := v.EncodeTDLibJSON(b); err != nil {
			return fmt.Errorf("unable to encode starTransactionPartnerChannel#44b29c29: field media element with index %d: %w", idx, err)
		}
		b.Comma()
	}
	b.StripComma()
	b.ArrEnd()
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerChannel) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerChannel#44b29c29 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerChannel"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerChannel#44b29c29: %w", err)
			}
		case "chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerChannel#44b29c29: field chat_id: %w", err)
			}
			s.ChatID = value
		case "paid_media_message_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerChannel#44b29c29: field paid_media_message_id: %w", err)
			}
			s.PaidMediaMessageID = value
		case "media":
			if err := b.Arr(func(b tdjson.Decoder) error {
				value, err := DecodeTDLibJSONPaidMedia(b)
				if err != nil {
					return fmt.Errorf("unable to decode starTransactionPartnerChannel#44b29c29: field media: %w", err)
				}
				s.Media = append(s.Media, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerChannel#44b29c29: field media: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (s *StarTransactionPartnerChannel) GetChatID() (value int64) {
	if s == nil {
		return
	}
	return s.ChatID
}

// GetPaidMediaMessageID returns value of PaidMediaMessageID field.
func (s *StarTransactionPartnerChannel) GetPaidMediaMessageID() (value int64) {
	if s == nil {
		return
	}
	return s.PaidMediaMessageID
}

// GetMedia returns value of Media field.
func (s *StarTransactionPartnerChannel) GetMedia() (value []PaidMediaClass) {
	if s == nil {
		return
	}
	return s.Media
}

// StarTransactionPartnerUnsupported represents TL type `starTransactionPartnerUnsupported#c4b20d73`.
type StarTransactionPartnerUnsupported struct {
}

// StarTransactionPartnerUnsupportedTypeID is TL type id of StarTransactionPartnerUnsupported.
const StarTransactionPartnerUnsupportedTypeID = 0xc4b20d73

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerUnsupported) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerUnsupported.
var (
	_ bin.Encoder     = &StarTransactionPartnerUnsupported{}
	_ bin.Decoder     = &StarTransactionPartnerUnsupported{}
	_ bin.BareEncoder = &StarTransactionPartnerUnsupported{}
	_ bin.BareDecoder = &StarTransactionPartnerUnsupported{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerUnsupported{}
)

func (s *StarTransactionPartnerUnsupported) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerUnsupported) String() string {
	if s == nil {
		return "StarTransactionPartnerUnsupported(nil)"
	}
	type Alias StarTransactionPartnerUnsupported
	return fmt.Sprintf("StarTransactionPartnerUnsupported%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerUnsupported) TypeID() uint32 {
	return StarTransactionPartnerUnsupportedTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerUnsupported) TypeName() string {
	return "starTransactionPartnerUnsupported"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerUnsupported) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerUnsupported",
		ID:   StarTransactionPartnerUnsupportedTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerUnsupported) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerUnsupported#c4b20d73 as nil")
	}
	b.PutID(StarTransactionPartnerUnsupportedTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerUnsupported) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerUnsupported#c4b20d73 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerUnsupported) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerUnsupported#c4b20d73 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerUnsupportedTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerUnsupported#c4b20d73: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerUnsupported) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerUnsupported#c4b20d73 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerUnsupported) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerUnsupported#c4b20d73 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerUnsupported")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerUnsupported) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerUnsupported#c4b20d73 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerUnsupported"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerUnsupported#c4b20d73: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// StarTransactionPartnerClassName is schema name of StarTransactionPartnerClass.
const StarTransactionPartnerClassName = "StarTransactionPartner"

// StarTransactionPartnerClass represents StarTransactionPartner generic type.
//
// Example:
//
//	g, err := tdapi.DecodeStarTransactionPartner(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.StarTransactionPartnerTelegram: // starTransactionPartnerTelegram#7a899cc0
//	case *tdapi.StarTransactionPartnerAppStore: // starTransactionPartnerAppStore#e34026dc
//	case *tdapi.StarTransactionPartnerGooglePlay: // starTransactionPartnerGooglePlay#f229f2a0
//	case *tdapi.StarTransactionPartnerFragment: // starTransactionPartnerFragment#da1849b5
//	case *tdapi.StarTransactionPartnerTelegramAds: // starTransactionPartnerTelegramAds#91f9c6b
//	case *tdapi.StarTransactionPartnerBot: // starTransactionPartnerBot#1bdcb459
//	case *tdapi.StarTransactionPartnerChannel: // starTransactionPartnerChannel#44b29c29
//	case *tdapi.StarTransactionPartnerUnsupported: // starTransactionPartnerUnsupported#c4b20d73
//	default: panic(v)
//	}
type StarTransactionPartnerClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() StarTransactionPartnerClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeStarTransactionPartner implements binary de-serialization for StarTransactionPartnerClass.
func DecodeStarTransactionPartner(buf *bin.Buffer) (StarTransactionPartnerClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case StarTransactionPartnerTelegramTypeID:
		// Decoding starTransactionPartnerTelegram#7a899cc0.
		v := StarTransactionPartnerTelegram{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerAppStoreTypeID:
		// Decoding starTransactionPartnerAppStore#e34026dc.
		v := StarTransactionPartnerAppStore{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerGooglePlayTypeID:
		// Decoding starTransactionPartnerGooglePlay#f229f2a0.
		v := StarTransactionPartnerGooglePlay{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerFragmentTypeID:
		// Decoding starTransactionPartnerFragment#da1849b5.
		v := StarTransactionPartnerFragment{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerTelegramAdsTypeID:
		// Decoding starTransactionPartnerTelegramAds#91f9c6b.
		v := StarTransactionPartnerTelegramAds{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerBotTypeID:
		// Decoding starTransactionPartnerBot#1bdcb459.
		v := StarTransactionPartnerBot{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerChannelTypeID:
		// Decoding starTransactionPartnerChannel#44b29c29.
		v := StarTransactionPartnerChannel{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerUnsupportedTypeID:
		// Decoding starTransactionPartnerUnsupported#c4b20d73.
		v := StarTransactionPartnerUnsupported{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONStarTransactionPartner implements binary de-serialization for StarTransactionPartnerClass.
func DecodeTDLibJSONStarTransactionPartner(buf tdjson.Decoder) (StarTransactionPartnerClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "starTransactionPartnerTelegram":
		// Decoding starTransactionPartnerTelegram#7a899cc0.
		v := StarTransactionPartnerTelegram{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerAppStore":
		// Decoding starTransactionPartnerAppStore#e34026dc.
		v := StarTransactionPartnerAppStore{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerGooglePlay":
		// Decoding starTransactionPartnerGooglePlay#f229f2a0.
		v := StarTransactionPartnerGooglePlay{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerFragment":
		// Decoding starTransactionPartnerFragment#da1849b5.
		v := StarTransactionPartnerFragment{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerTelegramAds":
		// Decoding starTransactionPartnerTelegramAds#91f9c6b.
		v := StarTransactionPartnerTelegramAds{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerBot":
		// Decoding starTransactionPartnerBot#1bdcb459.
		v := StarTransactionPartnerBot{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerChannel":
		// Decoding starTransactionPartnerChannel#44b29c29.
		v := StarTransactionPartnerChannel{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerUnsupported":
		// Decoding starTransactionPartnerUnsupported#c4b20d73.
		v := StarTransactionPartnerUnsupported{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// StarTransactionPartner boxes the StarTransactionPartnerClass providing a helper.
type StarTransactionPartnerBox struct {
	StarTransactionPartner StarTransactionPartnerClass
}

// Decode implements bin.Decoder for StarTransactionPartnerBox.
func (b *StarTransactionPartnerBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode StarTransactionPartnerBox to nil")
	}
	v, err := DecodeStarTransactionPartner(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.StarTransactionPartner = v
	return nil
}

// Encode implements bin.Encode for StarTransactionPartnerBox.
func (b *StarTransactionPartnerBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.StarTransactionPartner == nil {
		return fmt.Errorf("unable to encode StarTransactionPartnerClass as nil")
	}
	return b.StarTransactionPartner.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for StarTransactionPartnerBox.
func (b *StarTransactionPartnerBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode StarTransactionPartnerBox to nil")
	}
	v, err := DecodeTDLibJSONStarTransactionPartner(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.StarTransactionPartner = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for StarTransactionPartnerBox.
func (b *StarTransactionPartnerBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.StarTransactionPartner == nil {
		return fmt.Errorf("unable to encode StarTransactionPartnerClass as nil")
	}
	return b.StarTransactionPartner.EncodeTDLibJSON(buf)
}
